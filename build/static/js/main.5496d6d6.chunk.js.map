{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","components/Balance.js","components/AccountSummary.js","components/Transaction.js","components/TransactionHistory.js","components/AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","action","type","transactions","filter","transaction","id","payload","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","Balance","total","useContext","map","amount","reduce","acc","item","toFixed","AccountSummary","amounts","income","expense","className","Transaction","sign","text","Math","abs","onClick","TransactionHistory","key","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sNAaeA,G,MAXA,WACb,OACE,6BAEM,4D,qBCLK,WAACC,EAAMC,GAClB,OAAOA,EAAOC,MACT,IAAK,qBACL,OAAO,2BACCF,GADR,IAEKG,aAAcH,EAAMG,aAAaC,QAAO,SAAAC,GAAW,OAAIA,EAAYC,KACnEL,EAAOM,aAIX,IAAK,kBACL,OAAO,2BACCP,GADR,IAEKG,aAAa,CAAEF,EAAOM,SAAV,mBAAqBP,EAAMG,iBAG7C,QACA,OAAOH,ICXVQ,EAAe,CAEnBL,aAAc,IA6BHM,EAAgBC,wBAAcF,GAI9BG,EAAiB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAElBC,qBAAWC,EAAWN,GAFJ,mBAEpCR,EAFoC,KAE9Be,EAF8B,KAqB5C,OAEI,kBAACN,EAAcO,SAAf,CACCC,MACM,CACId,aAAcH,EAAMG,aACpBe,kBAtBd,SAA2BZ,GACvBS,EAAU,CACRb,KAAM,qBACNK,QAASD,KAoBDa,eAfd,SAAwBd,GACpBU,EAAU,CACRb,KAAM,kBACNK,QAASF,OAgBJO,ICvDDQ,EAhBC,WAAO,IAKfC,EAJoBC,qBAAWb,GAA5BN,aAEoBoB,KAAI,SAAAlB,GAAW,OAAIA,EAAYmB,UAEtCC,QAAO,SAACC,EAAIC,GAAL,OAAeD,EAAOC,IAAM,GAAGC,QAAQ,GAEpE,OACE,6BACM,uCACA,gCAAMP,KCeDQ,EAzBQ,WAAO,IAItBC,EAFoBR,qBAAWb,GAA5BN,aAEoBoB,KAAI,SAAAlB,GAAW,OAAIA,EAAYmB,UAEtDO,EAASD,EACb1B,QAAO,SAAAuB,GAAI,OAAIA,EAAO,KACtBF,QAAO,SAACC,EAAIC,GAAL,OAAeD,EAAOC,IAAM,GACnCC,QAAQ,GACJI,IAEqC,EAFzBF,EAChB1B,QAAO,SAAAuB,GAAI,OAAIA,EAAO,KACtBF,QAAO,SAACC,EAAIC,GAAL,OAAeD,EAAOC,IAAM,IAEnCC,QAAQ,GAGV,OACI,yBAAKK,UAAU,qBACb,sCAAW,6BAAK,0BAAMA,UAAU,UAAhB,KAA4BF,IAC5C,uCAAY,6BAAZ,IAAkB,0BAAME,UAAU,UAAhB,KAA4BD,EAA5B,QCFXE,EAlBK,SAAC,GAAuB,IAApB7B,EAAmB,EAAnBA,YACda,EAAsBI,qBAAWb,GAAjCS,kBAGFiB,EAAO9B,EAAYmB,OAAS,EAAI,IAAM,IAE5C,OAEM,wBAAIS,UAAU,oBACX5B,EAAY+B,KAEX,kCAASD,EAAT,IAAiBE,KAAKC,IAAIjC,EAAYmB,QAAtC,KACA,4BAAQS,UAAU,aAAaM,QAAY,kBAAMrB,EAAkBb,EAAYC,MAA/E,OCYGkC,EAtBY,WAAO,IACvBrC,EAAiBmB,qBAAWb,GAA5BN,aAGT,OACE,6BACI,mDAEA,wBAAI8B,UAAU,mBAEV9B,EAAaoB,KAAI,SAAAlB,GAAW,OAExB,kBAAC,EAAD,CAAaoC,IAAKpC,EAAYC,GAAID,YAAeA,UC6BlDqC,EA1CQ,WAAO,IAAD,EACFC,mBAAS,IADP,mBACnBP,EADmB,KACdQ,EADc,OAEED,mBAAS,GAFX,mBAEnBnB,EAFmB,KAEZqB,EAFY,KAInB1B,EAAmBG,qBAAWb,GAA9BU,eAcR,OACE,6BACE,mDAEA,0BAAM2B,SAhBO,SAAAC,GACfA,EAAEC,iBAEF,IAAMC,EAAkB,CACpB3C,GAAG+B,KAAKa,MAAsB,IAAhBb,KAAKc,UACnBf,OACAZ,QAASA,GAGZL,EAAe8B,IAOgBhB,UAAU,oBACxC,2BAAOmB,QAAQ,QACb,2BAAOlD,KAAK,OAAOe,MAAQmB,EAAMiB,SAAU,SAACN,GAAD,OAAOH,EAAQG,EAAEO,OAAOrC,QAAQsC,YAAY,gBAAgBC,UAAQ,KAE7G,6BACD,wEAED,2BAAOJ,QAAQ,QACZ,2BAAOlD,KAAK,SAASe,MAAQO,EAAQ6B,SAAU,SAACN,GAAD,OAAOF,EAAUE,EAAEO,OAAOrC,QAAQsC,YAAY,WAAWC,UAAQ,KAGnH,6BAEA,2BAAOvB,UAAU,MAAM/B,KAAK,SAASe,MAAM,2B,MCVpCwC,MAff,WAEE,OACI,kBAAC,EAAD,KACE,yBAAKxB,UAAU,aACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCXQyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5496d6d6.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n  return (\n    <div>\n\n          <h2>\n          Expense Tracker by waseem\n          </h2>\n    </div>\n  )\n}\n\nexport default Header;\n","\nexport default (state,action) => {\n    switch(action.type) {\n         case \"DELETE_TRANSACTION\" :\n         return  {\n              ...state,\n              transactions: state.transactions.filter(transaction => transaction.id !==\n              action.payload)\n\n         }\n\n          case \"ADD_TRANSACTION\" :\n          return  {\n               ...state,\n               transactions: [action.payload,...state.transactions]\n             }\n\n         default:\n         return state;\n    }\n}\n","import React,{ createContext, useReducer } from \"react\";\n\n//import the AppReducer\n\nimport AppReducer from \"./AppReducer\";\n\n//Initaila State\nconst initialState = {\n\n  transactions: [\n    // {\n    //   id:1,\n    //   text:\"book\",\n    //   amount:25\n    // },\n    //\n    // {\n    //   id:2,\n    //   text:\"Laptop\",\n    //   amount:-25000\n    // },\n    //\n    // {\n    //    id:3,\n    //   text:\"mac\",\n    //   amount:75000\n    // },\n    //\n    // {\n    //    id:4,\n    //   text:\"I-Pad\",\n    //   amount:-35000\n    // }\n  ]\n}\n\n//Create Context\n\nexport const GlobalContext = createContext(initialState);\n\n//provider Component\n\nexport const GlobalProvider = ({ children }) => {\n\n     const [state,dispatch] = useReducer(AppReducer,initialState)\n\n     // Actions\n     function deleteTransaction(id) {\n         dispatch( {\n           type: 'DELETE_TRANSACTION',\n           payload: id\n            }\n        )\n     }\n\n     function addTransaction(transaction) {\n         dispatch( {\n           type: 'ADD_TRANSACTION',\n           payload: transaction\n            }\n        )\n     }\n\n    return (\n\n        <GlobalContext.Provider\n         value = {\n               {\n                   transactions: state.transactions,\n                   deleteTransaction,\n                   addTransaction\n               }\n         } >\n\n              { children }\n\n        </GlobalContext.Provider>\n    )\n}\n","import React,{ useContext } from \"react\";\nimport {GlobalContext} from \"../context/GlobalState\";\n\nconst Balance = () => {\n  const  { transactions } = useContext(GlobalContext);\n  // console.log(\"i am from balnce\", transactions)\n  const amounts = transactions.map(transaction => transaction.amount);\n  // console.log(amounts);\n  const total = amounts.reduce((acc,item) => (acc += item),0).toFixed(2);\n  // console.log(total);\n  return (\n    <div>\n          <h4>Balance</h4>\n          <h1>${total}</h1>\n\n    </div>\n  )\n}\n\nexport default Balance;\n","import React,{useContext} from \"react\";\nimport { GlobalContext } from \"../context/GlobalState\";\n\nconst AccountSummary = () => {\n\n  const  { transactions } = useContext(GlobalContext);\n\n  const amounts = transactions.map(transaction => transaction.amount);\n\n  const income = amounts\n   .filter(item => item > 0 )\n   .reduce((acc,item) => (acc += item),0)\n   .toFixed(2);\n  const expense = ( amounts\n   .filter(item => item < 0 )\n   .reduce((acc,item) => (acc += item),0) * -1\n )\n   .toFixed(2);\n\n\n  return (\n      <div className=\"expense-container\">\n        <h3>Income <br/><span className=\"Colr-1\"> ${income}</span></h3>\n        <h3>Expense <br/> <span className=\"Colr-2\"> ${expense} </span></h3>\n    </div>\n  )\n}\n\nexport default AccountSummary;\n","import React,{ useContext } from \"react\";\nimport { GlobalContext } from \"../context/GlobalState\";\n\nconst Transaction = ( { transaction } ) => {\n  const { deleteTransaction } = useContext(GlobalContext);\n\n\n  const sign = transaction.amount < 0 ? \"-\" : \"+\";\n\n  return (\n\n        <li className=\"TranscationStyle\">\n          {transaction.text}\n\n            <span> { sign }${Math.abs(transaction.amount)} </span>\n            <button className=\"btn-danger\" onClick = { () => deleteTransaction(transaction.id) } >X</button>\n        </li>\n\n  )\n}\n\nexport default Transaction;\n","import React,{ useContext } from \"react\";\nimport { GlobalContext } from \"../context/GlobalState\";\nimport Transaction from \"./Transaction\";\n\n\nconst TransactionHistory = () => {\n   const { transactions } = useContext(GlobalContext);\n\n   // console.log(transactions);\n  return (\n    <div  >\n        <h3>Transaction History</h3>\n\n        <ul className=\"trnsaction-list\">\n\n          { transactions.map(transaction => (\n\n                <Transaction key={transaction.id} transaction = {transaction} />\n          ))}\n\n\n        </ul>\n\n    </div>\n  )\n}\n\nexport default TransactionHistory;\n","import React,{ useState, useContext } from \"react\";\n\nimport { GlobalContext} from \"../context/GlobalState\";\n\nconst AddTransaction = () => {\n  const [ text,setText ] = useState(\"\");\n  const [ amount,setAmount ] = useState(0);\n\n  const { addTransaction } = useContext(GlobalContext);\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    const newTransaction =  {\n        id:Math.floor(Math.random() * 100000000),\n        text,\n        amount: +amount\n    }\n\n     addTransaction(newTransaction);\n  }\n\n  return (\n    <div>\n      <h3>Add New Transaction</h3>\n\n      <form onSubmit = { onSubmit } className=\"transaction-form\">\n      <label htmlFor=\"text\">\n        <input type=\"text\" value ={text} onChange={(e) => setText(e.target.value)} placeholder=\"Description *\" required/>\n      </label>\n          <br/>\n         <span> Negative - Expense, Positive - Income</span>\n\n        <label htmlFor=\"text\">\n           <input type=\"number\" value ={amount} onChange={(e) => setAmount(e.target.value)} placeholder=\"Amount *\" required/>\n        </label>\n\n        <br/>\n\n        <input className=\"btn\" type=\"submit\" value=\"Add New transaction\" />\n\n      </form>\n      </div>\n  )\n}\n\nexport default AddTransaction;\n","import React  from 'react';\nimport Header from \"./components/Header\";\nimport Balance from \"./components/Balance\";\nimport AccountSummary from \"./components/AccountSummary\";\nimport TransactionHistory from \"./components/TransactionHistory\";\nimport AddTransaction from \"./components/AddTransaction\";\n\n\n  //import global provider\nimport {GlobalProvider} from \"./context/GlobalState\";\n\nimport './App.css';\n\n\nfunction App() {\n\n  return (\n      <GlobalProvider>\n        <div className=\"container\">\n            <Header />\n            <Balance />\n            <AccountSummary />\n            <TransactionHistory />\n            <AddTransaction />\n        </div>\n      </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}